
void pnt1_vp(
	float4 position				: POSITION,
	float3 normal				: NORMAL,
	float2 uv					: TEXCOORD0,

	out float4 oPosition		: POSITION,
	out float2 oUv				: TEXCOORD0,
	out float oZ				: TEXCOORD1,
	out float4 oObjectPosition	: TEXCOORD2,
	out float4 oNormal			: TEXCOORD3,

	uniform float4x4 world,
	uniform float4x4 worldViewProj,
	uniform float4x4 texture)
{
	oPosition = mul(worldViewProj, position);
	oObjectPosition = mul(world, position);
	oNormal = mul(world, float4(normal, 0));
	oUv = mul(texture, float4(uv, 0, 0));
	oZ = 1;
}

void pvn_vp(
	float4 position				: POSITION,
	float3 normal				: NORMAL,
	float2 uv					: TEXCOORD0,

	out float4 oPosition		: POSITION,
	out float4 oNormal			: TEXCOORD0,

	uniform float4x4 worldView,
	uniform float4x4 worldViewProj)
{
	oPosition = mul(worldViewProj, position);
	oNormal = mul(worldView, float4(normal, 0));
}


sampler DiffuseMap : register(s0);

float4 phongSpot_fp(
	float2 uv				: TEXCOORD0,
	float Z					: TEXCOORD1,
	float4 objectPosition	: TEXCOORD2,
	float4 normal			: TEXCOORD3,

	uniform float3 cameraPosition,
	uniform float3 lightPosition,
	uniform float3 lightDirection,
	uniform float4 lightDiffuse,
	uniform float4 lightSpecular,
	uniform float4 spotLightParams,
	uniform float4 specularColor,
	uniform float shininess)
	: COLOR
{
	if(Z < 0)
		discard;

	float4 Kd = tex2D(DiffuseMap, uv);

	float3 N = normalize(normal.xyz);
	float3 V = normalize(cameraPosition - objectPosition.xyz);
	float3 L = normalize(lightPosition - objectPosition.xyz);

	float cosDirection = dot(L, -lightDirection);
	float spotEffect = smoothstep(spotLightParams.y, spotLightParams.x, cosDirection);

	float diffuseLight = saturate(dot(N, L));
	float4 diffuseResult = lightDiffuse * diffuseLight * Kd * spotEffect;

	float3 H = normalize(L + V);
	float specularLight = pow(max(dot(N, H), 0), shininess);
	float specularResult = lightSpecular * specularLight * specularColor * spotEffect;

	float4 result = diffuseResult + specularResult;

	return result;
}

float4 lambertSpot_fp(
	float2 uv				: TEXCOORD0,
	float Z					: TEXCOORD1,
	float4 objectPosition	: TEXCOORD2,
	float4 normal			: TEXCOORD3,

	uniform float3 lightPosition,
	uniform float3 lightDirection,
	uniform float4 lightDiffuse,
	uniform float4 spotLightParams)
	: COLOR
{
	if(Z < 0)
		discard;

	float4 Kd = tex2D(DiffuseMap, uv);

	float3 N = normalize(normal.xyz);
	float3 L = normalize(lightPosition - objectPosition.xyz);

	float cosDirection = dot(L, -lightDirection);
	float spotEffect = smoothstep(spotLightParams.y, spotLightParams.x, cosDirection);

	float diffuseLight = saturate(dot(N, L));
	float4 diffuseResult = lightDiffuse * diffuseLight * Kd * spotEffect;

	return diffuseResult;
}

float4 ambient_fp(
	float2 uv				: TEXCOORD0,
	float Z					: TEXCOORD1,

	uniform float4 ambientColor)
	: COLOR
{
	if(Z < 0)
		discard;

	return ambientColor * tex2D(DiffuseMap, uv);
}

float4 nolight_fp(
	float2 uv				: TEXCOORD0,
	float Z					: TEXCOORD1)
	: COLOR
{
	if(Z < 0)
		discard;

	return tex2D(DiffuseMap, uv);
}


sampler EnvironmentMap : register(s0);

float4 sphericalMap_fp(
	float4 normal				: TEXCOORD0,

	uniform float4 evnColor)
	: COLOR
{
	float3 N = normalize(normal.xyz);
	float2 uv = (-N.xy + 1) * 0.5f;
	uv.y *= -1;

	return tex2D(EnvironmentMap, uv) * evnColor;
}
